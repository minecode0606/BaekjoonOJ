import sys


def gcd(m, n):
    """
	m과 n을 입력받은후 유클리드 호제법을 사용하여 최대공약수를 구하는 함수입니다.
	유클리드 호제법 : m > n이고 m,n이 일반항일떄 (m,n) -> (n,r) 으로 변환시켜 r이 0이 될때 n의 값이 두수 m,n의 최대공약수이다.
	(이때 m > n, r은 m을 n으로 나눈 나머지)
	ex)  (1071, 1029) = (1029, 42) = (42, 21) = (21, 0)이므로 gcd(1071, 1029) = 21이다.

	:param m,n (m > n):
	:return m과 n의 최대공약수 (ged):
	"""
    if m < n:  # 만약 n이 m보다 크다면
        m, n = n, m  # m과 n의 값을 바꿉니다. <- 전제에 m > n이라고 주어졌기 때문에 연산요류를 방지해주기 위한 예외처리 단계입니다.
    if n == 0:  # 만약 n이 0이라면
        return m  # m을 반환합니다. <- 아니 인간적으로 m과 0의 최대공약수는 m이므로 당연히 예외처리 해줍니다. ex) gcd(100, 0)
    if m % n == 0:  # 이말은 또 무어시나면 m을 n으로 나누었을때 나머지가 0이라면 당연히 n이 최대공약수기 떄문입니다. ex) gcd(10, 2)
        return n
    else:  # 위에서 언급한 예외처리 이외에 상황에서는 (m,n) -> (n,r)으로 변환시키는 함수를 재귀적으로 호출합니다.
        return gcd(n, m % n)


A, B = map(int, sys.stdin.readline().split())

print(gcd(A, B))